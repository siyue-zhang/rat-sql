-- Assumptions:
--   1. sql is correct
--   2. only table name has alias
--   3. only one intersect/union/except

module Squall
{
    -- val: number(float)/string(str)/sql(dict)
    val = Number(object f)
        | String(string s)
        | ValSql(sql s)
        | ColUnit(col_unit c)
        | Present_ref
        | Terminal

    -- col_unit: (agg_id, col_id, isDistinct(bool))
    col_unit = (
      agg_type agg_id,
      column col_id,
      singleton is_distinct,
    )

    -- val_unit: (unit_op, col_unit1, col_unit2)
    -- val_unit = (
    --     unit_type unit_op,
    --     col_unit col_unit1,
    --     col_unit col_unit2
    -- )
    val_unit = Column(col_unit col_unit1)
             | Minus(col_unit col_unit1, val val2)
             | Plus(col_unit col_unit1, val val2)
             | Times(col_unit col_unit1, val val2)
             | Divide(col_unit col_unit1, val val2)
             -- ADD: change to include "select abs ( c3_number - c5_number )"
             | AbsMinus(col_unit col_unit1, val val2)
             | SumMinus(col_unit col_unit1, val val2)
    -- ADD: new type of two values
    -- dual_val: (unit_op, val1, val2)
    -- dual_val = (
    --     unit_type unit_op,
    --     val val1,
    --     val val2
    -- )
    dual_val = Value(val val1)
             | Minus(val val1, val val2)
             | Plus(val val1, val val2)
             | Times(val val1, val val2)
             | Divide(val val1, val val2)
             | AbsMinus(val val1, val val2)

    -- table_unit: (table_type, col_unit/sql)
    table_unit = TableUnitSql(sql s)
               | Table(table table_id)

    -- condition: [cond_unit1, 'and'/'or', cond_unit2, ...]
    -- cond_unit: (not_op, op_id, val_unit, val1, val2)
    cond = And(cond left, cond right)
         | Or(cond left, cond right)
         | Not(cond c)
         | Between(val_unit val_unit, val val1, val val2)
         -- ADD: change to new value type for "where id = ( select id from w where c3 = 'chicago rush' ) + 1"
         | Eq(val_unit val_unit, dual_val dual_val1)
         | Gt(val_unit val_unit, dual_val dual_val1)
         | Lt(val_unit val_unit, dual_val dual_val1)
         | Ge(val_unit val_unit, dual_val dual_val1)
         | Le(val_unit val_unit, dual_val dual_val1)
         | Ne(val_unit val_unit, dual_val dual_val1)
         -- ADD: change to multiple values for "where c3 in ( 'university of witwatersrand' , 'iit guwahati' )"
         | In(val_unit val_unit, val* vals)
         | Like(val_unit val_unit, val val1)
         -- ADD: condition "where c3 not null"
         | Notnull(val_unit val_unit)
         -- ADD: condition "where c7_number is null"
         | Isnull(val_unit val_unit)
         -- These don't ever appear in the dataset
         -- | Is(val_unit val_unit, val val1)
         -- | Exists(val_unit val_unit, val val1)
         -- | CondUnit(singleton not_op, cond_op op_id, val_unit val_unit, val val1, val val2)

    -- sql {
    --   'select': (isDistinct(bool), [(agg_id, val_unit), (agg_id, val_unit), ...])
    --   'from': {'table_units': [table_unit1, table_unit2, ...], 'conds': condition}
    --   'where': condition
    --   'groupBy': [col_unit1, col_unit2, ...]
    --   'orderBy': ('asc'/'desc', [val_unit1, val_unit2, ...])
    --   'having': condition
    --   'limit': None/limit value
    --   'intersect': None/sql
    --   'except': None/sql
    --   'union': None/sql
    -- }
    sql = (
      select select,
      from from,
      cond? where,
      col_unit* group_by,
      order_by? order_by,
      cond? having,
      int? limit, 
      sql? intersect,
      sql? except,
      sql? union,
    )

    -- ADD: for "select (select) > (select/number)"
    --          "select (select) + (select/number)"
    query = Single(val val1)
        | Double(val val1, val val2)

    --   'select': (isDistinct(bool), [(agg_id, val_unit), (agg_id, val_unit), ...])
    select = (singleton is_distinct, agg* aggs)
    agg = (agg_type agg_id, val_unit val_unit)

    --   'from': {'table_units': [table_unit1, table_unit2, ...], 'conds': condition}
    from = (table_unit* table_units, cond? conds)
    --   'orderBy': ('asc'/'desc', [val_unit1, val_unit2, ...])
    order_by = (order order, val_unit* val_units)

    -- CLAUSE_KEYWORDS = ('select', 'from', 'where', 'group', 'order', 'limit', 'intersect', 'union', 'except')
    -- JOIN_KEYWORDS = ('join', 'on', 'as')

    -- WHERE_OPS = ('not', 'between', '=', '>', '<', '>=', '<=', '!=', 'in', 'like', 'is', 'exists', 'notnull', 'isnull')
    -- cond_type = Between | Eq | Gt | Lt | Ge | Le | Ne | In | Like | Is | Exists | Notnull | Isnull

    -- UNIT_OPS = ('none', '-', '+', "*", '/', 'abs(-)')
    --unit_type = NoneUnitOp | Minus | Plus | Times | Divide | AbsMinus

    -- AGG_OPS = ('none', 'max', 'min', 'count', 'sum', 'avg', 'julianday', 'length')
    agg_type = NoneAggOp | Max | Min | Count | Sum | Avg | Julianday | Length

    -- TABLE_TYPE = {
    --     'sql': "sql",
    --     'table_unit': "table_unit",
    -- }
    -- COND_OPS = ('and', 'or')
    -- SQL_OPS = ('intersect', 'union', 'except')
    -- ORDER_OPS = ('desc', 'asc')
    order = Asc | Desc
}
